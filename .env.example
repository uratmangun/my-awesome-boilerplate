# Redis Configuration
# ===================
# Redis connection URL for the database
# Format: redis://[username:password@]host:port[/database]
# 
# For local development (Redis running on localhost):
REDIS_URL=redis://localhost:6379
GOOGLE_AI_API_KEY=
# For Redis Cloud (managed Redis service):
# REDIS_URL=redis://username:password@redis-12345.c1.us-east1-1.gce.cloud.redislabs.com:12345

# For Upstash Redis (serverless Redis for Deno Deploy/Cloudflare):
# REDIS_URL=redis://username:password@your-redis-url.upstash.io:6379

# For Railway Redis:
# REDIS_URL=redis://default:password@containers-us-west-1.railway.app:6379

# For Heroku Redis:
# REDIS_URL=redis://h:password@ec2-host.compute-1.amazonaws.com:6379

# Clerk Authentication Configuration
# ===================================
# Get your keys from https://dashboard.clerk.com/
VITE_CLERK_PUBLISHABLE_KEY=
# CLERK_SECRET_KEY should ONLY be used in backend (Deno Deploy) and NEVER exposed to the frontend
# CLERK_SECRET_KEY=

# Deno Deploy Configuration
# ========================
# If deploying to Deno Deploy, add your Redis URL as an environment variable
# in the Deno Deploy dashboard under your project settings

# Cloudflare Pages Configuration  
# ==============================
# If using Cloudflare Pages, add REDIS_URL to your environment variables
# in the Cloudflare Pages dashboard under Settings > Environment variables

# Development Notes
# ================
# 1. Copy this file to .env for local development
# 2. Replace the REDIS_URL with your actual Redis connection string
# 3. Never commit your .env file to version control
# 4. For production, set environment variables in your deployment platform

# Redis Providers Recommendations
# ===============================
# - Local Development: Install Redis locally or use Docker
# - Serverless (Deno Deploy): Use Upstash Redis (has a generous free tier)
# - Traditional hosting: Redis Cloud, Railway, or self-hosted Redis
# - Cloudflare Pages: Use Upstash Redis or Cloudflare's own Redis (when available)

# Example Redis Docker command for local development:
# docker run -d -p 6379:6379 redis:alpine

# GitHub Deployment Secrets
# =========================
# These secrets are required for the GitHub Actions deployment workflow
# Add these to your GitHub repository secrets (Settings > Secrets and variables > Actions)

# Deno Deploy Configuration
# ------------------------
# Get your token from: https://dash.deno.com/account#access-tokens
DENO_DEPLOY_TOKEN=your_deno_deploy_token_here

# Cloudflare Configuration
# -----------------------
# Get API token from: https://dash.cloudflare.com/profile/api-tokens
# Create a token with "Cloudflare Pages:Edit" permissions
CLOUDFLARE_API_TOKEN=your_cloudflare_api_token_here

# Get Account ID from: https://dash.cloudflare.com/ (right sidebar)
CLOUDFLARE_ACCOUNT_ID=your_cloudflare_account_id_here

# GitHub Configuration
# -------------------
# Personal Access Token with repo permissions for updating repository settings
# Get from: https://github.com/settings/tokens
ADMIN_TOKEN=your_github_personal_access_token_here

# Frontend Environment Variables
# =============================
# These are automatically set by the deployment workflow
# but you can override them for custom deployments

# Custom Deno API URL (optional - auto-detected if not set)
VITE_DENO_API_URL=https://your-project-name.deno.dev

# Deployment Instructions
# ======================
# 1. Fork this repository
# 2. Add all the above secrets to your GitHub repository secrets
# 3. Push to main/master branch to trigger automatic deployment
# 4. The workflow will:
#    - Deploy backend functions to Deno Deploy
#    - Deploy frontend to Cloudflare Pages
#    - Set up environment variables automatically
#    - Update repository homepage URL

NOMIC_API_KEY=
